# A simple cd-and-ls wrapper
function cl() {
    cd $1;
    ls -lF;
}

# Get all of my IPs
function ip () {
    echo -e "WiFi:     `ipconfig getifaddr en0 2> /dev/null`"
    echo -e "Wired:    `ipconfig getifaddr en1 2> /dev/null`"
    echo -e "External: `dig +short myip.opendns.com @resolver1.opendns.com`"
}

# Simple calculator
function calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
            sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
                -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
                -e 's/0*$//;s/\.$//'   # remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

# Create a .tar.gz archive of current directory
function targz() {
    local tmpFile="$(basename `pwd`).tar.gz"
    tar -czvf "${tmpFile}" --exclude=".DS_Store" --exclude=".git" --exclude=".svn" --exclude "${tmpFile}" . || return 1

    echo "${tmpFile} created successfully."
}

# Convert a jpg to png using apple's sips command
function jpg2png() {
    sips -s format png $1 --out ${1/jpg/png}
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
    local title
    local body
    if [ -t 0 ]; then
        title="$1"
        body="$2"
    else
        title=$(cat)
    fi
        osascript >/dev/null <<EOF
tell application "Notes"
    tell account "thedustinbarnes@icloud.com"
        tell folder "Notes"
            make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
        end tell
    end tell
end tell
EOF
}

# Smarter Sublime Text opening.
# Use with no options to open current directory in Sublime
# Otherwise, it will open the given location
function s() {
    if [ $# -eq 0 ]; then
        subl .
    else
        subl "$@"
    fi
}

# Catch-all extractor method. 
# Usage: ex apache-*.tar.gz
function ex() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjfv $1        ;;
            *.tar.gz)    tar xzfv $1     ;;
            *.tar.xz)    tar xJfv $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       rar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xfv $1        ;;
            *.tbz2)      tar xjfv $1      ;;
            *.tgz)       tar xzfv $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via ex()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Prints out all the colors available via tput
function 256colors() {
    ( x=`tput op` y=`printf %$((${COLUMNS}-6))s`;
    for i in {0..256};
    do
    o=00$i;
    echo -e ${o:${#o}-3:3} `tput setaf $i;tput setab $i`${y// /=}$x;
    done )
}

# Move the given file(s) to the Trash.
function trash() {
    local path
    for path in "$@"; do
        # Make relative paths "absolutey".
        [ "${path:0:1}" = '/' ] || path="$PWD/$1";
 
        # Execute the AppleScript to nudge Finder.
        echo "$(cat <<-EOD
            tell application "Finder"
                delete POSIX file "${path//\"/\"}"
            end
        EOD)" | osascript;
    done;
}
